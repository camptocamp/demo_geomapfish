---
# The project Docker compose file for development.

version: '2.3'

volumes:
  postgresql_data:

services:
  config:
    extends:
      file: docker-compose-lib.yaml
      service: config
    environment:
      - OSM_PGDATABASE
      - RASTER_BASE_PATH
      - AZURE_STORAGE_CONNECTION_STRING

  print:
    extends:
      file: docker-compose-lib.yaml
      service: print
    volumes_from:
      - config:ro

  mapserver:
    extends:
      file: docker-compose-lib.yaml
      service: mapserver
    volumes_from:
      - config:ro

  qgisserver:
    extends:
      file: docker-compose-lib.yaml
      service: qgisserver
    volumes_from:
      - config:ro
    environment:
      - AZURE_STORAGE_CONNECTION_STRING
      - QGIS_SERVER_LANDING_PAGE_PROJECTS_DIRECTORIES=/etc/qgisserver
      - QGIS_SERVER_LANDING_PAGE_PREFIX=/mapserv_proxy/qgis
      # Or
      # - QGIS_SERVER_LANDING_PAGE_PROJECTS_PG_CONNECTIONS=...

  tinyows:
    extends:
      file: docker-compose-lib.yaml
      service: tinyows
    volumes_from:
      - config:ro

  # Standalone version
  # redis:
  #   extends:
  #     file: docker-compose-lib.yaml
  #     service: redis

  # To test OpenShift version
  redis_master:
    extends:
      file: docker-compose-lib.yaml
      service: redis_master

  redis_slave:
    extends:
      file: docker-compose-lib.yaml
      service: redis_slave
    depends_on:
      - redis_master

  redis_sentinel:
    extends:
      file: docker-compose-lib.yaml
      service: redis_sentinel
    depends_on:
      - redis_master

  tilecloudchain:
    extends:
      file: docker-compose-lib.yaml
      service: tilecloudchain
    environment:
      - AZURE_STORAGE_CONNECTION_STRING
    volumes_from:
      - config:ro

  tilegeneration_slave:
    extends:
      file: docker-compose-lib.yaml
      service: tilegeneration_slave
    volumes_from:
      - config:ro
    environment:
      - AZURE_STORAGE_CONNECTION_STRING
      - AWS_DEFAULT_REGION

  geoportal:
    extends:
      file: docker-compose-lib.yaml
      service: geoportal
    volumes_from:
      - config:ro
    environment:
      - PGSCHEMA
      - OSM_PGDATABASE
      - RASTER_BASE_PATH
      - SMTP_USER
      - SMTP_PASSWORD
      - SENTRY_URL
      - SENTRY_CLIENT_RELEASE=${DOCKER_TAG}
      - SENTRY_CLIENT_ENVIRONMENT
      - AZURE_STORAGE_CONNECTION_STRING

  alembic:
    extends:
      file: docker-compose-lib.yaml
      service: alembic
    environment:
      - PGSCHEMA

  custom:
    image: ${DOCKER_BASE}-custom:${DOCKER_TAG}
    build:
      context: custom
      args:
        GIT_HASH: ${GIT_HASH}
    environment:
      - VISIBLE_WEB_HOST
      - GEOPORTAL_INTERNAL_URL
      - PGSCHEMA
      - SQLALCHEMY_URL=postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}?sslmode=${PGSSLMODE}
      - SQLALCHEMY_SLAVE_URL=postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST_SLAVE}:${PGPORT_SLAVE}/${PGDATABASE}?sslmode=${PGSSLMODE}

  front:
    extends:
      file: docker-compose-lib.yaml
      service: front
    volumes_from:
      - config:ro

  # Rich image for project development with e.-g. vim, tree, awscli, psql, ...
  tools:
    extends:
      file: docker-compose-lib.yaml
      service: tools
    environment:
      - OSM_PGDATABASE
  # db:
  #   extends:
  #     file: docker-compose-lib.yaml
  #     service: db
  #   volumes:
  #     - postgresql_data:/var/lib/postgresql/data
