grids:
    # grid name, I just recommends to add the min resolution because it's common to not generate all the layers at the same resolution.
    epsg2056_005:
        # resolutions [required]
        # Resolutions from eCH-0056 - WMTS-07
        # https://www.ech.ch/dokument/473ea824-bbcd-43fa-ad0a-c7c84edfa1b8
        resolutions: [4000, 2000, 1000, 500, 250, 100, 50, 20, 10, 5, 2.5, 1, 0.5, 0.25, 0.1, 0.05]
        # bbox [required]
        bbox: [2420000, 1030000, 2900000, 1350000]
        # srs [required]
        srs: EPSG:2056

caches:
    local:
        type: filesystem
        folder: /var/sig/tiles
        # for GetCapabilities
        http_url: ${VISIBLE_WEB_PROTOCOL}://${VISIBLE_WEB_HOST}${VISIBLE_ENTRY_POINT}
    s3:
        type: s3
        bucket: ${TILEGENERATION_S3_BUCKET}
        folder: ''
        # for GetCapabilities
        http_url: ${VISIBLE_WEB_PROTOCOL}://${VISIBLE_WEB_HOST}${VISIBLE_ENTRY_POINT}
        cache_control: 'public, max-age=14400'
        host: ${AWS_S3_ENDPOINT}

# this defines some defaults values for all the layers
defaults:
    layer: &layer
        type: wms
        grid: epsg2056_005
        # The minimum resolution to seed, useful to use with mapcache, optional.
        min_resolution_seed: 5
        # the URL of the WMS server to used
        url: ${MAPSERVER_URL}
        # Set the headers to get the right virtual host, and don't get any cached result
        headers:
            Host: '${VISIBLE_WEB_HOST}'
            Cache-Control: no-cache, no-store
            Pragma: no-cache
        # file name extension
        extension: png
        # legend file name extension
        legend_extension: png
        # the bbox there we want to generate tiles
        bbox: [2473743, 1074095, 2850904, 1325533]

        # mime type used for the WMS request and the WMTS capabilities generation
        mime_type: image/png
        # mime type used for the WMS request and the WMTS legend image generation
        legend_mime: image/png
        wmts_style: default
        # the WMTS dimensions definition [default to []]
        #dimensions:
        #    -   name: DATE
        #        # the default value for the WMTS capabilities
        #        default: '2012'
        #        # the generated values
        #        generate: ['2012']
        #        # all the available values in the WMTS capabilities
        #        values: ['2012']
        # the meta tiles definition [default to off]
        meta: on
        # the meta tiles size [default to 8]
        meta_size: 5
        # the meta tiles buffer [default to 128]
        meta_buffer: 128
        # connection an sql to get geometries (in column named geom) where we want to generate tiles
        # Warn: too complex result can slow down the application
#    connection: host=localhost port=5432 user=www-data password=www-data dbname=<db>
#    geoms:
#        -   sql: <column> AS geom FROM <table>
        # size and hash used to detect empty tiles and metatiles [optional, default to None]
        empty_metatile_detection:
            size: 740
            hash: 3237839c217b51b8a9644d596982f342f8041546
        empty_tile_detection:
            size: 921
            hash: 1e3da153be87a493c4c71198366485f290cad43c
        post_process: optipng

layers:
    map:
        <<: *layer
        layers: default
    map_jpeg:
        <<: *layer
        layers: default
        extension: jpeg
        mime_type: image/jpeg
        empty_metatile_detection:
            size: 66163
            hash: a9d16a1794586ef92129a2fb41a739451ed09914
        empty_tile_detection:
            size: 1651
            hash: 2892fea0a474228f5d66a534b0b5231d923696da
        post_process: jpegoptim

generation:
    default_cache: s3

    # maximum allowed consecutive errors, after it exit [default to 10]
    maxconsecutive_errors: 10

redis:
    socket_timeout: ${REDIS_TIMEOUT}
    # For standalone version
    # url: 'redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}'
    # For OpenShift version
    sentinels:
      - - ${REDIS_HOST}
        - ${REDIS_PORT}
    service_name: ${REDIS_SERVICENAME}
    db: ${REDIS_DB}

# Not used if the previous redis section is not commented out
sqs:
    # The region where the SQS queue is
    region: eu-west-1
    # The SQS queue name, it should already exists
    queue: '${TILEGENERATION_SQS_QUEUE}'

server:
    wmts_path: tiles
    static_path: tiles/static
    admin_path: tiles/admin
    expires: 8  # 8 hours
    mapcache_internal: True
    predefined_commands:
    -   name: Generation all layers
        command: generate_tiles --role=master
    -   name: Generation layer map
        command: generate_tiles --role=master --layer=map
    -   name: Generation OpenLayers example
        command: generate_controller --openlayers
    -   name: Generate the legend images
        command: generate_controller --generate-legend-images

process:
    optipng_test:
    -   cmd: optipng -o7 -simulate %(in)s
    optipng:
    -   cmd: optipng %(args)s -q -zc9 -zm8 -zs3 -f5 %(in)s
        arg:
            default: '-q'
            quiet: '-q'
    jpegoptim:
    -   cmd: jpegoptim %(args)s --strip-all --all-normal -m 90 %(in)s
        arg:
            default: '-q'
            quiet: '-q'

openlayers:
    # srs, center_x, center_y [required]
    srs: EPSG:2056
    center_x: 2600000
    center_y: 1200000

metadata:
    title: Camptocamp GeoMapFish demo
    abstract: Camptocamp GeoMapFish demo
    servicetype: OGC WMTS
    keywords:
    - camptocamp
    - geomapfish
    - demo
    fees: None
    access_constraints: None

provider:
    name: Camptocamp
    url: https://www.camptocamp.com/solutions/geospatial/
    contact:
        name: Camtocamp
        position: Compygny
        info:
            phone:
                voice: +41 21 619 10 10
            address:
                delivery: EPFL Innovation Park - Building A
                city: Lausanne
                area: VD
                postal_code: 1015
                country: Switzerland
                email: info@camptocamp.com
